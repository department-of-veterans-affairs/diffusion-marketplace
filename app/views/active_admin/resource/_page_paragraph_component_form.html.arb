### Uncomment the "f.inputs" block to render on PageComponent page to get html
### This will help build the Arbre::Context to concat with the main template
# f.inputs 'Paragraph',
#          for: [:component, f.object.component || PageParagraphComponent.new],
#          id: 'PageHeaderComponent_poly', class: 'inputs polyform' do |phc|
#   phc.input :text, hint: 'Make this header stand out'
#
# end

# TODO: get the placeholder how active admin does "NEW_#{association_human_name.upcase.split(' ').join('_')}_RECORD"
placeholder ||= 'NEW_PAGE_COMPONENT_RECORD'
component ||= nil
html = Arbre::Context.new do
  li "", id: "PageParagraphComponent_poly_#{placeholder}", class: "input polyform component-#{placeholder}" do
    fieldset class: "inputs" do
      legend do
        span 'Body text'
      end
      ol do
        li class: 'string input optional stringish', id: "page_page_components_attributes_paragraph_#{placeholder}_component_attributes_text_input" do
          if component
            input type: 'hidden', value: component.id, name: "page[page_components_attributes][#{placeholder}][component_attributes][id]"
          end
          label 'Text', for: "page_page_components_attributes_paragraph_#{placeholder}_component_attributes_text", class: 'label'

          div rows:'20', class: 'quill-editor', id: "page_page_components_attributes_paragraph_#{placeholder}_component_attributes_text" do
            input type: 'hidden',
                  name: "page[page_components_attributes][#{placeholder}][component_attributes][text]",
                  value: component&.text
            div class: 'quill-editor-content' do
              component&.send(:text).try :html_safe
            end
          end

          para 'Supplementary text to headings and descriptions.', class: 'inline-hints'
        end
      end
    end
  end
end

return html.to_s
