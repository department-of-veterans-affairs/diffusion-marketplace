// only initialize the following variables while on the search page
<% if params[:action] === 'search' %>
    var practices = <%= @practices_json %>;
    var facilities = <%= raw (@va_facilities + @clinical_resource_hubs).to_json %>;
    var visns = <%= raw @visns.to_json %>;
    var adoptions = <%= raw @diffusion_histories.to_json %>;
    var results = null;
    var resultsHTML = '';
    var NO_QUERY_CONTENT = '.search-no-results';
    var RESULTS_SECTION = '#dm-search-practices';
    var SPINNER = '.dm-loading-spinner';
    var LOAD_MORE_CONTAINER = '.button-box';
    var SEARCH_RESULTS = '#search-results';
    var SORT_EL = '#search_sort_option';
    var isBlankSearch = false;
    var NO_SEARCH_RESULTS_TEXT = '.no-query-results-p';
    // Add Namespace for scroll position
    var pagePosition = {
        original: 0,
        // Log the user's spot on the page when they open the filters modal on mobile
        getScrollPosition: function () {
            this.original = $(window).scrollTop();
        }
    }
    var all_categories = <%= raw @categories.to_json %>;
    var allChosenCategories = [];
<% end %>


// sort functions
function sortAToZ(a, b) {
    return a.item.name.trim().localeCompare(b.item.name.trim(), undefined, { numeric: true, sensitivity: 'base' });
}

function sortByDateAdded(a, b) {
    return b.item.created_at.localeCompare(a.item.created_at, undefined, { numeric: true, sensitivity: 'base' });
}

function sortByAdoptionCounts(a, b) {
    if (a.item.adoption_count > b.item.adoption_count){
        return -1;
    }
    if (a.item.adoption_count < b.item.adoption_count){
        return 1;
    }
    return 0;
}

function sortByScore(a, b) {
    if (a.score < b.score){
        return -1;
    }
    if (a.score > b.score){
        return 1;
    }
    return 0;
}

function sortByRetired(a, b){
    return a.item.retired - b.item.retired
}

function getVisn(visnsArray, facility) {
    return visnsArray.find(function(v) {
        return v.number.toString() === facility.split('-').pop();
    });
}

function getVaFacility(facilitiesArray, facility) {
    return facilitiesArray.find(function(f) {
        if (f.station_number) {
            return facility === f.station_number;
        } else {
            return facility === f.official_station_name;
        }
    });
}

function getVaFacilitiesByVisn(facilitiesArray, facility) {
    return facilitiesArray.filter(function(f) {
        return f.visn_id === facility.id;
    });
}

// Build out practice cards once results come back from Fuse
function buildPracticeCard(result) {
    var cardHtml = '';
    var practiceImage = result.item.image;
    var practiceName = result.item.name;
    var practiceId = result.item.id;

    var cardHeaderHtml =
        '<h3 class="text-normal font-sans-lg multiline-ellipses-2 margin-top-0 margin-bottom-2">' +
            '<span class="dm-practice-title">' +
                practiceName +
            '</span>' +
        '</h3>';

    // Default card image
    var cardImagePlaceholder =
        '<div class="practice-card-img-placeholder" data-practice-id="' + practiceId + '" data-practice-image="' + practiceImage + '" data-practice-name="' + practiceName + '"  ></div>'

    var cardRetiredBanner = '';
    if (result.item.retired) {
        cardRetiredBanner = '<div class="dm-practice-retired-banner"><h5>Retired</h5></div>';
    }


    cardHtml +=
        '<div class="dm-practice-card padding-bottom-3 tablet:grid-col-6 desktop:grid-col-4 position-relative">' +
            '<a href="/innovations/' + result.item.slug +
                '" tabindex="-1" aria-hidden="true" class="dm-practice-link-aria-hidden position-absolute top-0 bottom-3 left-105 right-105 z-100"></a>' +
            '<div class="dm-practice-card-container">' +
                cardImagePlaceholder +
                cardRetiredBanner +
                '<div class="padding-105 height-card-mobile">' +
                    cardHeaderHtml +
                    '<p class="multiline-ellipses-1 font-sans-sm practice-card-tagline">' + result.item.tagline + '</p>' +
                    '<div class="dm-practice-card-origin margin-bottom-2">' +
                        '<span class="font-sans-2xs text-italic line-height-sans-3 dm-practice-card-origin-info">' +
                            'Created ' + result.item.initiating_facility_name +
                        '</span>' +
                    '</div>' +
                '</div>' +
            '</div>' +
        '</div>';

    return cardHtml;
}

function showSpinner() {
    $(SPINNER).removeClass('display-none');
    $(SPINNER).addClass('display-flex');
}

function hideIconAndText() {
    if (!$(NO_QUERY_CONTENT).hasClass('display-none')) {
        $(NO_QUERY_CONTENT).addClass('display-none');
    }
}

function hideLoadMoreButton() {
    if (!$(LOAD_MORE_CONTAINER).hasClass('display-none')) {
        $(LOAD_MORE_CONTAINER).addClass('display-none');
    }
}

function hideResultsSectionElAndShowSpinner() {
    $(RESULTS_SECTION).addClass('display-none');
    hideIconAndText();
    showSpinner();
}

function hideResultsElAndShowSpinner() {
    $(SEARCH_RESULTS).addClass('display-none');
    hideIconAndText();
    hideLoadMoreButton();
    showSpinner();
}

function openMobileFiltersModal(openOnPageLoad) {
    $(document).on('click', '#mobile_filters_button', function() {
        $('.search-filters-accordion-button').attr('aria-expanded', 'true');
        $('#search_filters_dropdown').removeAttr('hidden');
        // Return the user to their original spot on the page, before opening the mobile modal
        pagePosition.getScrollPosition();
    });

    if (openOnPageLoad) {
        $('#mobile_filters_button').trigger('click');
    }
}

function toggleAccordion(accordionEl, containerEl) {
    if (($(accordionEl).attr('aria-expanded') === 'true')) {
        $(accordionEl).attr('aria-expanded', 'false');
        $(containerEl).addClass('display-none');
    } else {
        $(accordionEl).attr('aria-expanded', 'true');
        $(containerEl).removeClass('display-none');
    }
}

function toggleMobileCategoriesAccordion(openOnPageLoad) {
    $(document).on('click', '.mobile-category-accordion', function() {
        toggleAccordion(this, '.category-container');
    });

    if (openOnPageLoad) {
        $('.mobile-category-accordion').each(function() {
            toggleAccordion(this, '.category-container');
        });
    }
}

function toggleMobileOriginAccordion() {
    $(document).on('click', '.mobile-origin-accordion', function() {
        toggleAccordion(this, '.originating-facility-container');
    });
}

function toggleMobileAdoptingAccordion() {
    $(document).on('click', '.mobile-adopting-accordion', function() {
        toggleAccordion(this, '.adopting-facility-container');
    });
}

function closeMobileFiltersModal() {
    $(document).on('click', '#close_filters_modal', function () {
        $('.search-filters-accordion-button').attr('aria-expanded', 'false')
        $('#search_filters_dropdown').attr('hidden', 'true');
        // Bring the user back to their original spot on the page, in case they scrolled down while in the modal
        $(window).scrollTop(pagePosition.original);
    });
}

function searchPracticesPage() {
    const searchField = document.querySelector('#dm-practice-search-field');
    // Skip if not the search page
    if (location.pathname !== '/search') return;

    // Template out the search results
    function buildSearchResults(results, sortOption) {
        $(SPINNER).addClass('display-none');
        var tmpResults = results.sort(sortOption);

        var resultsArray = [];
        var finalResults = '';
        tmpResults.sort(sortByRetired).forEach(function (result) {
            const practiceCard = buildPracticeCard(result)
            finalResults += practiceCard;
            resultsArray.push(practiceCard);

            '<!-- Uncomment to show Fuse.js diagnostics -->' +
            '<!--' +
            '<h3>Fuse.js highlighted character matching</h3>' +
            '<p class="">' + result.highlight + '</p>' +
            '<p><b>Score: ' + result.score + '</b></p>' +
            '-->'
        });
        if (results.length > 0) {

            // Hide sorting options if there's only 1 result
            if (results.length === 1) {
                sortSelect.addClass('display-none');
            } else if (results.length !== 1 && sortSelect.hasClass('display-none')) {
                sortSelect.removeClass('display-none');
            }

            // Show the results summary section
            if ($(RESULTS_SECTION).hasClass('display-none')) {
                $(RESULTS_SECTION).removeClass('display-none');
            }

            $(SEARCH_RESULTS).removeClass('display-none');

            // Print results to the page
            document.querySelector('#search-results').innerHTML = finalResults;
            // After the html for the card has been built and applied to the DOM, replace the image 'src' based on the signed url
            replaceImagePlaceholders();
            $(SEARCH_RESULTS).showMoreItems({
                startNum: 12,
                afterNum: 12,
                moreText: 'Load more',
                noMoreText: 'No more results'
            })

        } else {
            if (!$(RESULTS_SECTION).hasClass('display-none')) {
                $(RESULTS_SECTION).addClass('display-none');
            }
            // Show the no results text
            if ($(NO_QUERY_CONTENT).hasClass('display-none')) {
                $(NO_QUERY_CONTENT).removeClass('display-none');
            }
            if (isBlankSearch && searchLocation[0] !== '?filter_by') {
                $(NO_SEARCH_RESULTS_TEXT).addClass('display-none');
            }
            else {
                $(NO_SEARCH_RESULTS_TEXT).removeClass('display-none');
            }
        }
    }

    var searchLocation = window.location.search.split('=');

    // Search practices and populate the page
    function search(query, categories, originatingFacility, adoptingFacility) {
        // Trim whitespace from the query (can cause matching problems)
        query = query.trim();
        isBlankSearch = !Boolean(query) && categories == undefined && originatingFacility == undefined && adoptingFacility == undefined ? true : false;
        // Set variables
        var resultsSummary = document.querySelector('#results-summary');
        // set the search page search bar input value
        searchField.value = query;

        const searchHeader = document.getElementById('searchHeader');
        if (query) {
            trackSearchField(query);
            searchHeader.textContent = `Search Results for: ${query}`;

            var searchBarQueryArray = [];
            search_options.keys.forEach(function(practiceKey) {
                var queryObj = {};
                queryObj[practiceKey] = query;
                return searchBarQueryArray.push(queryObj);
            });
        } else {
            searchHeader.textContent = "Search";
            if (searchLocation[0] === '?filter_by') {
                trackSearchByFilter(searchLocation[1]);
            }
        }

        $('.applied-filter').remove();
        $('#resetSearchFiltersButton').addClass('display-none');

        if (categories) {
            //     // Collect any practice that has a category that matches the selected category/categories.
            var categoryFilters = [];

            Object.entries(categories).forEach(function ([parentCategory, selectedValues]) {
                if (parentCategory !== 'communities') {
                    selectedValues.forEach(function (categorySelection) {
                        addAppliedFilter('TAG', categorySelection);
                        categoryFilters.push({'category_names': "=\"" + categorySelection + "\""});
                    });
                }
            });

            // Iterate over 'communities' categories
            if (categories['communities']) {
                categories['communities'].forEach(function (categorySelection) {
                    addAppliedFilter('COMMUNITY', categorySelection);
                    categoryFilters.push({'category_names': "=\"" + categorySelection + "\""});
                });
            }
        }

        var originFacilityArray = originatingFacility ? [] : null;

        if (originatingFacility && originatingFacility.includes('VISN-')) {
            // Collect any practice that either has the selected VISN as an origin facility, or has an origin facility that belongs to the selected VISN

            // Add the VISN to the array
            var originatingFacilityVisn = getVisn(visns, originatingFacility);

            originFacilityArray.push({'initiating_facility': "=\"" + originatingFacilityVisn.id.toString() + "\""});

            var visnFacilities = getVaFacilitiesByVisn(facilities, originatingFacilityVisn)

            // Now add the facilities
            visnFacilities.forEach(function(vf) {
                if (vf.hasOwnProperty('station_number')) {
                    originFacilityArray.push({'origin_facilities': "=\"" + vf.station_number + "\""});
                } else {
                    originFacilityArray.push({'origin_facilities': "=\"" + vf.official_station_name + "\""});
                }

                addAppliedFilter('ORIGIN', vf.official_station_name)
            });
        } else if (originatingFacility && !originatingFacility.includes('VISN-')){
            // Collect the practices that have an origin facility matching the selected facility
            var foundOriginatingFacility = facilities.find(function(f) {
                if (f.hasOwnProperty('station_number')) {
                    return originatingFacility === f.station_number;
                } else {
                    return originatingFacility === f.official_station_name;
                }
            });
            addAppliedFilter('ORIGIN', foundOriginatingFacility.official_station_name)

            originFacilityArray.push({'origin_facilities': "=\"" + (foundOriginatingFacility.hasOwnProperty('station_number') ? foundOriginatingFacility.station_number : foundOriginatingFacility.official_station_name) + "\""});
        }

        function getAdoptionFacilities(stationNumbers, facilityIds) {
            adoptions.forEach(function(a) {
                stationNumbers.forEach(function(sn) {
                    if (a.va_facility_number && a.va_facility_number === sn) {
                        facilityIds.push({'adoption_facilities': "=\"" + sn + "\""});
                    } else if (a.clinical_resource_hub_name && a.clinical_resource_hub_name === sn) {
                        facilityIds.push({'adoption_facilities': "=\"" + sn + "\""});
                    }
                });
                return facilityIds;
            });
        }

        if (adoptingFacility) {
            var filteredFacilities;
            var stationNumbers = [];
            var adoptionFacilityArray = [];
            if (adoptingFacility.includes('VISN-')) {
                var adoptingFacilityVisn = getVisn(visns, adoptingFacility);

                // Collect any practice that has a diffusion history with a facility that belongs to the selected VISN
                filteredFacilities = getVaFacilitiesByVisn(facilities, adoptingFacilityVisn)

                filteredFacilities.forEach(function(ff) {
                    if (ff.station_number) {
                        stationNumbers.push(ff.station_number);
                    } else {
                        stationNumbers.push(ff.official_station_name);
                    }
                    addAppliedFilter('ADOPTION', ff.official_station_name)
                });

                getAdoptionFacilities(stationNumbers, adoptionFacilityArray);
            } else {
                // Collect any practice that has a diffusion history with a facility that matches the selected facility
                var foundAdoptingFacility = getVaFacility(facilities, adoptingFacility);

                foundAdoptingFacility.station_number ? stationNumbers.push(foundAdoptingFacility.station_number) : stationNumbers.push(foundAdoptingFacility.official_station_name)
                getAdoptionFacilities(stationNumbers, adoptionFacilityArray);
                addAppliedFilter('ADOPTION', foundAdoptingFacility.official_station_name)
            }
        }

        /*
        IMPORTANT: Per Research and Design, if the user's search contains a string from the search bar, utilize the $and operator so that the result(s) must match all conditions.
        On the other hand, if the user's search only contains filters, utilize the $or operator so that the results can match ANY of the conditions.
         */

        /*
        Make a result a closer match if it has more than one matching category, as Fuse.js uses short-circuit evaluation. This means most of the time,
        the results will have the same score because it stops after the first match.
        */
        function improveResultScoreBasedOnAmountOfCategoryMatches(results) {
            results.map(function(result) {
                var resultScore = result.score;
                var cat_names = result.item.category_names;
                if (cat_names && Array.isArray(cat_names)) {
                    cat_names.forEach(function (cn) {
                        if (allChosenCategories.includes(cn)) {
                            resultScore = result.score / 2;
                        }
                        result.score = resultScore;
                    });
                } else if (cat_names && Array.isArray(cat_names) == false) {
                    resultScore = result.score / 2;
                    result.score = resultScore;
                }
            });
        }
        /*
        If the user selects a VISN in the originating facility combo box and the result has an initiating_facility that matches the id of the selected VISN, improve the score of the result.
        Reasoning explained in the comment above. If the user selects a facility, and the result has a practice_origin_facility that matches the selection, improve the score of the result.
        */
        function improveResultScoreBasedOnOriginatingFacility(results) {
            results.map(function(result) {
                var resultScore = result.score;
                if (originFacilityArray[0].initiating_facility) {
                    if (result.item.initiating_facility_type === 'visn' && result.item.initiating_facility === originFacilityArray[0].initiating_facility.slice(2, -1)) {
                        resultScore = result.score / 2;
                    }
                } else if (!originFacilityArray[0].initiating_facility) {
                    if (result.item.initiating_facility_type === 'facility' && result.item.origin_facilities.includes(originFacilityArray[0].origin_facilities.slice(2, -1))) {
                        resultScore = result.score / 2;
                    }
                }
                result.score = resultScore;
            });
        }
        /*
        If the user selects a VISN in the adopting facility combo box, improve the score of the result for each adoption that has a facility_id that matches any of the facilities
        that belong to the selected VISN. If VISN is not selected, just improve the score once.
        */
        function improveResultScoreBasedOnAmountOfAdoptingFacilities(results) {
            results.map(function(result) {
                var resultScore = result.score;
                var adoption_facilities = result.item.adoption_facilities;
                if (adoptingFacility.includes('VISN') && adoption_facilities.length > 0) {
                    adoption_facilities.forEach(function (af) {
                        if (stationNumbers.includes(af)) {
                            resultScore = result.score / 2;
                        }
                        result.score = resultScore;
                    });
                } else if (!adoptingFacility.includes('VISN')) {
                    resultScore = result.score / 2;
                }
                result.score = resultScore;
            });
        }

        function searchWithQueryAndAllFilters() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: originFacilityArray}
                        ]
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndCategoriesAndBothFacilities() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: originFacilityArray}
                        ]
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndCategoriesAndOriginFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: originFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndCategoriesAndAdoptingFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndBothFacilities() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: [
                            {$or: originFacilityArray}
                        ]
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndCategories() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    }
                ]
            });
        }

        function searchWithQueryAndOriginFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: [
                            {$or: originFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithQueryAndAdoptingFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            });
        }

        function searchWithNoQueryAndNoFilters() {
            var maturityLevels = ['emerging', 'replicate', 'scale'];
            var filterTerm = decodeURI(searchLocation[1]);
            if (searchLocation[0] === '?filter_by') {
                if (maturityLevels.includes(searchLocation[1])) {
                    searchByFilterTerm('maturity_level', filterTerm);
                } else if (all_categories.includes(filterTerm)) {
                    searchByFilterTerm('category_names', filterTerm);
                } else {
                    results = [];
                }
            } else {
                // on an empty search, return all of the practices, but in the fuse format
                results = fuse._docs.map(item => {
                    return {
                        item,
                        matches: [],
                        score: null
                    };
                });
            }
        }

        function searchWithAllFilters() {
            results = fuse.search({$or: categoryFilters.concat(originFacilityArray, adoptionFacilityArray)});
            improveResultScoreBasedOnAmountOfCategoryMatches(results);
            improveResultScoreBasedOnOriginatingFacility(results);
            improveResultScoreBasedOnAmountOfAdoptingFacilities(results);
        }

        function searchWithCategoriesAndBothFacilities() {
            results = fuse.search({$or: categoryFilters.concat(originFacilityArray, adoptionFacilityArray)});
            improveResultScoreBasedOnAmountOfCategoryMatches(results);
            improveResultScoreBasedOnOriginatingFacility(results);
            improveResultScoreBasedOnAmountOfAdoptingFacilities(results);
        }

        function searchWithCategoriesAndOriginatingFacility() {
            results = fuse.search({$or: categoryFilters.concat(originFacilityArray)});
            improveResultScoreBasedOnAmountOfCategoryMatches(results);
            improveResultScoreBasedOnOriginatingFacility(results);
        }

        function searchWithCategoriesAndAdoptingFacility() {
            results = fuse.search({$or: categoryFilters.concat(adoptionFacilityArray)});
            improveResultScoreBasedOnAmountOfCategoryMatches(results);
            improveResultScoreBasedOnAmountOfAdoptingFacilities(results);
        }

        function searchWithBothFacilities() {
            results = fuse.search({$or: adoptionFacilityArray.concat(originFacilityArray)});
            improveResultScoreBasedOnOriginatingFacility(results);
            improveResultScoreBasedOnAmountOfAdoptingFacilities(results);
        }

        function searchWIthOnlyCategories() {
            results = fuse.search({$or: categoryFilters});
            improveResultScoreBasedOnAmountOfCategoryMatches(results);
        }

        function searchWithOnlyOriginatingFacility() {
            results = fuse.search({$or: originFacilityArray});
            improveResultScoreBasedOnOriginatingFacility(results);
        }

        function searchWithOnlyAdoptingFacility() {
            results = fuse.search({$or: adoptionFacilityArray});
            improveResultScoreBasedOnAmountOfAdoptingFacilities(results);
        }

        function searchByFilterTerm(searchKey, filterTerm) {
            var searchFilter = {};
            searchFilter[searchKey] = "=\"" + filterTerm + "\"";
            results = fuse.search(searchFilter);
        }

        // Run the search query and include filters(if any)
        if (!query && !categories && !originatingFacility && !adoptingFacility) {
            searchWithNoQueryAndNoFilters();
        } else if (query && categories && originatingFacility && adoptingFacility) {
            searchWithQueryAndAllFilters();
        } else if (query && categories && originatingFacility && adoptingFacility) {
            searchWithQueryAndCategoriesAndBothFacilities();
        } else if (query && categories && originatingFacility && !adoptingFacility) {
            searchWithQueryAndCategoriesAndOriginFacility();
        } else if (query && categories && !originatingFacility && adoptingFacility) {
            searchWithQueryAndCategoriesAndAdoptingFacility();
        } else if (query && !categories && originatingFacility && adoptingFacility) {
            searchWithQueryAndBothFacilities();
        } else if (query && categories && !originatingFacility && !adoptingFacility) {
            searchWithQueryAndCategories();
        } else if (query && !categories && originatingFacility && !adoptingFacility) {
            searchWithQueryAndOriginFacility();
        } else if (query && !categories && !originatingFacility && adoptingFacility) {
            searchWithQueryAndAdoptingFacility();
        } else if (!query && categories && originatingFacility && adoptingFacility) {
            searchWithCategoriesAndBothFacilities();
        } else if (!query && categories && originatingFacility && !adoptingFacility) {
            searchWithCategoriesAndOriginatingFacility();
        } else if (!query && categories && !originatingFacility && adoptingFacility) {
            searchWithCategoriesAndAdoptingFacility();
        } else if (!query && !categories && originatingFacility && adoptingFacility) {
            searchWithBothFacilities();
        } else if (!query && categories && !originatingFacility && !adoptingFacility ) {
            searchWIthOnlyCategories();
        } else if (!query && !categories && originatingFacility && !adoptingFacility) {
            searchWithOnlyOriginatingFacility();
        } else if (!query && !categories && !originatingFacility && adoptingFacility) {
            searchWithOnlyAdoptingFacility();
        } else if (query && !categories && !originatingFacility && !adoptingFacility) {
            results = fuse.search(query);
        }

        // Get the results and then filter them
        if (!query && !categories && !originatingFacility && !adoptingFacility) {
            // on an empty search or filtered search, sort by most adoptions and disable the score sorting option, since the score for each result is the same
            buildSearchResults(results, sortByAdoptionCounts);
            $(SORT_EL).children().first().attr('disabled', 'true');
            $(SORT_EL).prop('selectedIndex', 2);
        } else {
            buildSearchResults(results, sortByScore);
            // re-enable the score sorting option
            $(SORT_EL).children().first().removeAttr('disabled');
            $(SORT_EL).prop('selectedIndex', 0);
        }

        // Print the number of results for the query
        resultsSummary.innerHTML = results.length + ' Result' + (results.length === 1 ? ':' : 's:');

        // Highlight results (only Fuse.js matching)
        results.forEach(function (result) {
            highlighter(result);
        });

        // Highlight search results where exact keyword matches
        var mark = new Mark('#search-results');
        mark.mark(query);
    }

    function addAppliedFilter(filterType, filterName) {
        const resultsSummary = document.getElementById('results-summary');
        const resetButton = document.getElementById('resetSearchFiltersButton');
        const appliedFilterName = filterName.toUpperCase();
        const appliedFilterString = `${filterType}: ${appliedFilterName} `;
        const appliedFilterButton = document.createElement('button');
        const filterClassIndexMap = {
            'TAG': 1,
            'COMMUNITY': 2,
            'ORIGIN': 3,
            'ADOPTION': 4
        };
        const filterClassIndex = filterClassIndexMap[filterType] || 1;

        appliedFilterButton.className = `usa-button applied-filter applied-filter-${filterClassIndex}`;
        appliedFilterButton.id = `${filterName}`;
        appliedFilterButton.textContent = appliedFilterString + ' X';
        appliedFilterButton.style.cursor = 'pointer';
        appliedFilterButton.setAttribute(
            'aria-label',
            `Remove ${filterType} filter for ${filterName} and update search results`
        );

        appliedFilterButton.addEventListener('click', function(event) {
            uncheckFilter(filterType, filterName);
            $('#resetSearchFiltersButton').addClass('display-none');
            updateResults();
            event.stopPropagation();
        });

        resultsSummary.parentNode.insertBefore(appliedFilterButton, resetButton);
        resetButton.classList.remove('display-none');
    }

    function uncheckFilter(filterType, filterName) {
        if (filterType === 'TAG' || filterType === 'COMMUNITY') {
            const checkbox = Array.from(document.querySelectorAll('.usa-checkbox__input')).find(c =>
                c.labels && c.labels.length && c.labels[0].textContent.trim() === filterName);
            if (checkbox) {
                checkbox.checked = false;
            }
        } else if (filterType === 'ORIGIN') {
            const button = document.querySelector('.originating-facility-container .usa-combo-box__clear-input');
            if (button) {
                button.click();
            }
        } else if (filterType === 'ADOPTION') {
            const button = document.querySelector('.adopting-facility-container .usa-combo-box__clear-input');
            if (button) {
                button.click();
            }
        }
    }

    // Highlight Fuse.js results
    // Adapted from: https://github.com/brunocechet/Fuse.js-with-highlight
    function highlighter(resultItem) {
        resultItem.matches.forEach(function (matchItem) {
            // don't highlight if match was on category, or adoption facilities, since they are not in practice search result text and can't be highlighted
            // don't highlight origin_facilities or initiating_facility because they are ids. The initiating_facility_name key will cover any text
            if (matchItem.key != 'category_names' &&
                matchItem.key != 'adoption_facilities' &&
                matchItem.key != 'origin_facilities' &&
                matchItem.key != 'initiating_facility' &&
                matchItem.key != 'practice_partner_names'
            ) {
                var text = resultItem.item[matchItem.key];
                var result = [];
                var matches = [].concat(matchItem.indices); // limpar referencia
                var pair = matches.shift();

                for (var i = 0; i < text.length; i++) {
                    var char = text.charAt(i);
                    if (pair && i === pair[0]) {
                        result.push('<mark>')
                    }
                    result.push(char);
                    if (pair && i === pair[1]) {
                        result.push('</mark>');
                        pair = matches.shift()
                    }
                }
                resultItem.highlight = result.join('');

                if (resultItem.children && resultItem.children.length > 0) {
                    resultItem.children.forEach(function (child) {
                        highlighter(child);
                    });
                }
            }
        });
    }

    // Set Fuse.js search options
    var search_options = {
        keys: ['name', 'tagline', 'description', 'summary', 'initiating_facility', 'category_names', 'maturity_level', 'adoption_facilities', 'origin_facilities', 'initiating_facility_name', 'overview_problem', 'overview_solution', 'overview_results', 'practice_partner_names'],
        minMatchCharLength: 1,
        tokenize: true,
        shouldSort: true,
        threshold: 0.35,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        matchAllTokens: true,
        findAllMatches: true,
        includeMatches: true,
        includeScore: true,
        useExtendedSearch: true,
        ignoreLocation: true
    };


    // Create a search context with practices and search options
    var fuse = new Fuse(practices, search_options);

    // Get the Combo box values based on user interaction
    function getComboBoxVal(inputEle, liEle) {
        var facility;
        if (inputEle.val() && liEle.length == 1) {
            if (liEle.attr('data-value').includes('VISN')) {
                return inputEle.val();
            } else {
                facility = facilities.find(function(f) {
                    return f.station_number === liEle.attr('data-value');
                });
                return facility.station_number;
            }
        } else if (inputEle.val() && liEle.length == 0) {
            if (inputEle.val().includes('VISN')) {
                return inputEle.val();
            } else {
                facility = facilities.find(function(f) {
                    return inputEle.val().toLowerCase().includes(f.official_station_name.toLowerCase());
                });
                return facility.station_number;
            }
        } else {
            return null;
        }
    }

    function closeAccordion(accordionEl, containerEl) {
        $(accordionEl).attr('aria-expanded', 'false');
        $(containerEl).addClass('display-none');
    }

    var accordionButton = $('.search-filters-accordion-button')
    function accordionText(checkboxCount, inputCount) {
        return accordionButton.text('Filters ' + '(' + (checkboxCount + inputCount) + ')');
    }

    $(document).on('submit', '#update-search-results-form', function (e) {
        e.preventDefault();
        hideResultsSectionElAndShowSpinner();

        // Close search filter accordion if it's open
        if (accordionButton.attr('aria-expanded') == 'true') {
            accordionButton.attr('aria-expanded', 'false');
            $('#search_filters_dropdown').attr('hidden', 'true');
        }

        // Close mobile accordions
        closeAccordion('.mobile-origin-accordion', '.originating-facility-container');
        closeAccordion('.mobile-adopting-accordion', '.adopting-facility-container');
        closeAccordion('.mobile-category-accordion', '.category-container');

        // Bring the user back to their original spot on the page, before they opened the mobile modal
        if ($(window).width() < 1024) {
            $(window).scrollTop(pagePosition.original);
        }

        updateResults();
    });

    function updateResults() {
        var urlQuery = searchField.value === '' ? '/search' : '/search?query=' + searchField.value;
        window.history.pushState({ turbolinks: {} }, "", urlQuery);

        // Get the value of the originating facility combo box
        var originatingFacilityInput = $('#originating-facility-and-visn-select');
        var originatingFacilityLi = $('#originating-facility-and-visn-select--list > li[aria-selected=true]');

        var originatingFacility =  getComboBoxVal(originatingFacilityInput, originatingFacilityLi);

        // Get the value of the adopting facility combo box
        var adoptingFacilityInput = $('#adopting-facility-and-visn-select');
        var adoptingFacilityLi = $('#adopting-facility-and-visn-select--list > li[aria-selected=true]');

        var adoptingFacility = getComboBoxVal(adoptingFacilityInput, adoptingFacilityLi);

        // Get the values for any chosen categories
        var selectedCategoryCheckboxes = $('#update-search-results-form [type="checkbox"]:checked:not(".all-clinical-checkbox"):not(".all-operational-checkbox"):not(".all-strategic-checkbox"):not(".all-communities-checkbox")');

        var chosenCategories = {};

        selectedCategoryCheckboxes.each(function () {
            var parentCategory = this.dataset.parentCategory;
            var value = this.value;

            if (!chosenCategories[parentCategory]) {
                chosenCategories[parentCategory] = [];
            }

            chosenCategories[parentCategory].push(value);
        });

        if (Object.keys(chosenCategories).length === 0) {
            chosenCategories = null;
        }

        // Update Category Usage....
        allChosenCategories = Object.values(chosenCategories).flat();
        Rails.ajax({
            type: 'patch',
            url: "/update_category_usage",
            data: jQuery.param({query: searchField.value, chosenCategories: allChosenCategories})
        });

        // Run the search
        search(searchField.value, chosenCategories, originatingFacility, adoptingFacility);

        // Display the amount of filters used(if any)
        var checkboxCount = selectedCategoryCheckboxes.length;
        var noOriginatingFacilityText = originatingFacilityInput.val() === '';
        var originatingFacilityTextPresent = originatingFacilityInput.val() !== '';
        var noAdoptingFacilityText = adoptingFacilityInput.val() === '';
        var adoptingFacilityTextPresent = adoptingFacilityInput.val() !== '';

        if (checkboxCount > 0 && originatingFacilityTextPresent && noAdoptingFacilityText) {
            accordionText(checkboxCount, 1);
        } else if (checkboxCount > 0 && noOriginatingFacilityText && adoptingFacilityTextPresent) {
            accordionText(checkboxCount, 1);
        } else if (checkboxCount > 0 && noOriginatingFacilityText && noAdoptingFacilityText) {
            accordionText(checkboxCount, 0);
        } else if (checkboxCount > 0 && originatingFacilityTextPresent && adoptingFacilityTextPresent) {
            accordionText(checkboxCount, 2);
        } else if (checkboxCount === 0 && originatingFacilityTextPresent && noAdoptingFacilityText) {
            accordionText(0, 1);
        } else if (checkboxCount === 0 && noOriginatingFacilityText && adoptingFacilityTextPresent) {
            accordionText(0, 1);
        } else if (checkboxCount === 0 && noOriginatingFacilityText && noAdoptingFacilityText) {
            return accordionButton.text('Filters');
        } else if (checkboxCount === 0 && originatingFacilityTextPresent && adoptingFacilityTextPresent) {
            accordionText(0, 2);
        }
    }

    // Sort the results based on each sort option
    var sortSelect = $(SORT_EL);
    sortSelect.on('change', function() {
        switch ($(this).val()) {
            case "most_relevant":
                hideResultsElAndShowSpinner();
                buildSearchResults(results, sortByScore);
                break;
            case "a_to_z":
                hideResultsElAndShowSpinner();
                buildSearchResults(results, sortAToZ);
                break;
            case "adoptions":
                hideResultsElAndShowSpinner();
                buildSearchResults(results, sortByAdoptionCounts);
                break;
            case "added":
                hideResultsElAndShowSpinner();
                buildSearchResults(results, sortByDateAdded);
                break;
        }
    });

    // Clear all filter options
    $(document).on('click', '#resetSearchFiltersButton, #resetSearchFiltersButtonMobile', function(e) {
        e.preventDefault();

        // uncheck all filter checkboxes
        $('.usa-combo-box__clear-input').each(function() {
            $(this).trigger('click');
        });

        $('.usa-checkbox__input').each(function() {
            if ($(this).prop('checked')) {
                $(this).prop('checked', false);
            }
        });

        // Move the focus area back to the top of the filters window
        $(".usa-combo-box__clear-input__wrapper").attr("tabindex",-1).focus();
        // Reset filter count text
        $('.search-filters-accordion-button').text('Filters');
        // reset search results
        searchPracticesPage();
    })

    if (window.location.pathname === '/search' && window.location.search !== '' && searchLocation[0] !== '?filter_by') {
        hideResultsSectionElAndShowSpinner();
        const params = new URLSearchParams(window.location.search);
        const query = params.get('query');
        const category = params.get('category');
        const allCommunities = params.get('all_communities');

        if (category) {
            const checkboxSelector = `input[type="checkbox"][name="${category}"]`;
            const checkbox = $(checkboxSelector);
            checkbox.prop('checked', true);
            accordionText(1, 0)
            search('', [category]);
        } else if (query) {
            search(decodeURI(query));
            searchField.value = decodeURI(query);
        } else if (allCommunities) {
            let allCommunitiesCheckbox = document.querySelector('.all-communities-checkbox');
            if (allCommunitiesCheckbox) {
                allCommunitiesCheckbox.checked = true;
                $(allCommunitiesCheckbox).trigger('change');
            }

            let selectedCategoryCheckboxes = $('#update-search-results-form [type="checkbox"]:checked:not(".all-clinical-checkbox"):not(".all-operational-checkbox"):not(".all-strategic-checkbox"):not(".all-communities-checkbox")');
            let chosenCategories = selectedCategoryCheckboxes.map(function () {
                return this.value;
            }).get();

            if (!chosenCategories.length) {
                chosenCategories = null;
            } else {
                accordionText(chosenCategories.length, 0)
            }
            search('', chosenCategories);
        } else {
            // No query or category filter
            searchField.value = '';
            search('');
        }
    } else if ((searchLocation[0] === '?filter_by') || (window.location.pathname === '/search' && window.location.search === '')) {
        hideResultsSectionElAndShowSpinner();
        search('');
    }
}

function trackSearchField(searchTerm) {
    if (searchTerm) {
        ahoy.track('Practice search', {search_term: searchTerm});
        if (typeof ga === 'function') {
            ga('send', {
                hitType: 'event',
                eventCategory: 'search',
                eventAction: 'search',
                location: '/search?query=' + searchTerm
            });
        }
    }
}

function trackSearchByFilter(filterTerm) {
    var decodedFilterTerm = decodeURI(filterTerm);
    ahoy.track('Practice search by filter', {filter_term: decodedFilterTerm});
    if (typeof ga === 'function') {
        ga('send', {
            hitType: 'event',
            eventCategory: 'search filter',
            eventAction: 'search filter',
            location: '/search?filter_by=' + decodedFilterTerm
        });
    }
}

function preventFiltersAccordionContentFlickerOnPageLoad() {
    $(document).arrive('.desktop-filters-accordion-heading', { existing: true }, (el) => {
        $(el).next().removeClass('display-none');
    });
}

function addAllCheckBoxListener(allCheckboxSelector, standardCheckboxSelector) {
    let allCheckbox = allCheckboxSelector;
    let checkbox = standardCheckboxSelector;

    $(document).on('change', allCheckbox, function() {
        if ($(this).prop('checked')) {
            $(checkbox).prop('checked', true);
        } else {
            $(checkbox).prop("checked", false);
        }
    });

    $(document).on('change', checkbox, function() {
        let catCheckboxesCountMinusAllAndOther = $(checkbox).length;
        if ($(`input${checkbox}:checked`).length === catCheckboxesCountMinusAllAndOther) {
            $(allCheckbox).prop('checked', true);
        } else {
            $(allCheckbox).prop('checked', false);
        }
    });
}

function execSearchFunctions() {
    const urlParams = new URLSearchParams(window.location.search);
    const openFiltersOnPageLoad = urlParams.get('filters') === 'open';

    openMobileFiltersModal(openFiltersOnPageLoad);
    toggleMobileCategoriesAccordion(openFiltersOnPageLoad);
    toggleMobileOriginAccordion();
    toggleMobileAdoptingAccordion();
    closeMobileFiltersModal();
    preventFiltersAccordionContentFlickerOnPageLoad();
    addAllCheckBoxListener('.all-clinical-checkbox', '.clinical-checkbox');
    addAllCheckBoxListener('.all-operational-checkbox', '.operational-checkbox');
    addAllCheckBoxListener('.all-strategic-checkbox', '.strategic-checkbox');
    addAllCheckBoxListener('.all-communities-checkbox', '.communities-checkbox');
    searchPracticesPage();
}

document.addEventListener('turbolinks:load', function () {
    execSearchFunctions();
});
