<!-- Page Styles -->

<style>
  hr {
    border: none;
    height: 3px;
    background: #dcdee0;
  }

  mark {
    background: #fff46b;
  }

  #practice-search-form {
    margin-bottom: 2rem;
  }

  #practice-search-field {
    margin: 0;
    float: left;
    height: 3rem;
  }

  #practice-search-button {
    float: left;
    height: 3rem;
    font-size: 1.3rem;
  }

  /* Wider than 650px */
  @media all and (min-width: 650px) {
    #practice-search-field {
      border-right: none;
      /*background: red;*/
    }

    #practice-search-button {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  /* Narrower than 650px */
  @media all and (max-width: 650px) {
    #practice-search-field {
      border-bottom: none;
      /*background: blue;*/
    }

    #practice-search-button {
      width: 100%;
      max-width: 30rem;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }

  #results-summary {
    font-style: italic;
    clear: both;
  }

  #search-results {
    margin-bottom: 10rem
  }

  #search-results a:visited {
    color: #0076d6;
  }

  p.practice-details {
    color: #71767a;
  }

  /* Truncate text a given line amount */
  .truncate-text {
    display: block;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    position: relative;
    line-height: 1.2;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 0 !important;
  }
  .one-line {
    -webkit-line-clamp: 1;
    height: calc(1em * 1.2 * 1);
  }
  .two-lines {
    -webkit-line-clamp: 2;
    height: calc(1em * 1.2 * 2);
  }
  .three-lines {
    -webkit-line-clamp : 3;
    height: calc(1em * 1.2 * 3);
  }
  .four-lines {
    -webkit-line-clamp: 4;
    height: calc(1em * 1.2 * 4);
  }
  .five-lines {
    -webkit-line-clamp: 5;
    height: calc(1em * 1.2 * 5);
  }

  /* Set 1:1 aspect ratio for image */
  /* Adapted from: http://www.mademyday.de/css-height-equals-width-with-pure-css.html */
  .img-box {
    position: relative;
    width: 100%;  /* desired width */
  }
  .img-box:before {
    content: "";
    display: block;
    padding-top: 100%;  /* initial ratio of 1:1 */
  }
  .img-box-content {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    border-radius: 20px;
    background-repeat: no-repeat;
  }
</style>


<!-- Page HTML -->

<section class="grid-container">
  <h1>Find a practice</h1>

  <div id="practice-search-form">
    <input id="practice-search-field" class="usa-input" autocomplete="off">
    <button id="practice-search-button" class="usa-button">Search</button>
    <div style="clear:both"></div>
  </div>

  <p id="results-summary"></p>
  <div id="search-results"></div>
</section>


<!-- JavaScript for Search -->

<script>

  // Search helper functions

  // Search practices and populate the page
  function search(query) {

    // Trim whitespace from the query (can cause matching problems)
    query = query.trim();

    // Set variables
    let resultsHTML = '';
    const resultsSummary = document.querySelector('#results-summary');
    const searchResults = document.querySelector('#search-results');

    // If the query is empty or less than three characters, remove any previous results from page
    if (query === '' || query.length < 3) {
      resultsSummary.innerHTML = '<p><i>Type at least three characters to search.</i></p>';
      searchResults.innerHTML = '';
      return;
    }

    // Run the search query
    const results = fuse.search(query);

    // Print the number of results for the query
    resultsSummary.innerHTML = `${results.length} result(s) for "${query}"`;
    resultsHTML += '<hr>';

    // Highlight results (only Fuse.js matching)
    results.forEach((result) => {
      highlighter(result);
    });

    // Template out the search results
    results.forEach((result) => {
      resultsHTML +=
       `<div class="grid-row margin-bottom-3">
          <div class="grid-col flex-1 margin-right-3">
            <div class="img-box margin-top-2">
              <div class="img-box-content" style="background: url('${result.item.image}') #97d4ea; background-size: cover"></div>
            </div>
          </div>
          <div class="grid-col flex-2">
            <h2><a href="/practices/${result.item.id}">${result.item.tagline}</a></h2>
              <h3 class="truncate-text two-lines">${result.item.description}</h3>
              <p class="practice-details">${result.item.name} | ${result.item.date_initiated} | ${result.item.initiating_facility}</p>
              <p class="truncate-text five-lines">${result.item.summary}</p>

              <!-- Uncomment to show Fuse.js diagnostics -->
              <!--
                <h3>Fuse.js highlighted character matching</h3>
                <p class="">${result.highlight}</p>
                <p><b>Score: ${result.score}</b></p>
              -->

          </div>
        </div>`;
    });

    // Print results to the page
    searchResults.innerHTML = resultsHTML;

    // Highlight search results where exact keyword matches
    const mark = new Mark('#search-results');
    mark.mark(query);
  }


  // Highlight Fuse.js results
  // Adapted from: https://github.com/brunocechet/Fuse.js-with-highlight
  function highlighter(resultItem) {
    resultItem.matches.forEach((matchItem) => {
      let text = resultItem.item[matchItem.key];
      let result = []
      let matches = [].concat(matchItem.indices); // limpar referencia
      let pair = matches.shift()

      for (let i = 0; i < text.length; i++) {
        let char = text.charAt(i)
        if (pair && i == pair[0]) {
          result.push('<mark>')
        }
        result.push(char)
        if (pair && i == pair[1]) {
          result.push('</mark>')
          pair = matches.shift()
        }
      }
      resultItem.highlight = result.join('');

      if(resultItem.children && resultItem.children.length > 0){
        resultItem.children.forEach((child) => {
          highlighter(child);
        });
      }
    });
  };


  // Set up search

  // Set Fuse.js search options
  var search_options = {
    keys: ['name', 'tagline', 'description', 'summary', 'initiating_facility'],
    minMatchCharLength: 3,
    tokenize: true,
    shouldSort: true,
    threshold: 0.2,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    matchAllTokens: true,
    findAllMatches: true,
    includeMatches: true,
    includeScore: true
  };

  // Create a search context with practices and search options
  var fuse = new Fuse(<%= @practices_json %>, search_options);

  // Search bar elements
  var searchField = document.querySelector('#practice-search-field');
  var searchButton = document.querySelector('#practice-search-button');

  // Set up "enter" event handler for search field
  searchField.addEventListener('keypress', (e) => {
    if (e.keyCode === 13) search(searchField.value);
  });

  // Set up search button click
  searchButton.addEventListener('click', (e) => {
    search(searchField.value);
  });

</script>
