var practices = <%= @practices_json %>;
var facilities = <%= raw @facilities_data.to_json %>;
var visns = <%= raw @visn_data.to_json %>;
var adoptions = <%= raw @diffusion_histories.to_json %>;
var results = null;


//function test() {
//    // Remove no search items content
    <%# if request.url.include?('query') %>
//      $('#no-search-query-content')
    <%# end %>
//}

function searchPracticesPage() {
    const searchField = document.querySelector('#dm-practice-search-field');

    // Skip if not the search page
    if (location.pathname !== '/search') return;

    // Search helper functions
//    function getFacilityDisplayName(stationName, commonName) {
//        return stationName.toLowerCase().includes(commonName.toLowerCase()) ? stationName : stationName + ' (' + commonName + ')'
//    }

    // Search practices and populate the page
    function search(query, categories, originatingFacility, adoptingFacility) {
        console.log('query', query)
        console.log('origin facility', originatingFacility)
        console.log('adopting facility', adoptingFacility)

        // Trim whitespace from the query (can cause matching problems)
        query = query.trim();

        // Set variables
        var resultsHTML = '';
        var resultsSummary = document.querySelector('#results-summary');
        var searchResults = document.querySelector('#search-results');

        // set the search page search bar input value
        searchField.value = query;

        if (query !== '') {
            var searchBarQueryArray = []
            search_options.keys.forEach(function(practiceKey) {
                var queryObj = {}
                queryObj[practiceKey] = query
                return searchBarQueryArray.push(queryObj)
            })
        }

        if (categories) {
            var categoryFilters = []
            categories.forEach(function (categorySelection) {
                return categoryFilters.push({'category_names': "'" + categorySelection})
            })
        }

        if (originatingFacility) {
            var originFacility = []
            if (originatingFacility.includes('VISN')) {
                console.log('in here')
                var foundVisn = visns.find(function(v) {
                    return v.number === originatingFacility
                })
                originFacility.push({'initiating_facility': "=\"" + foundVisn.id.toString() + "\""})
            } else {
                var foundFacility = facilities.find(function(f) {
                    return originatingFacility === f.StationNumber
                })
                originFacility.push({'origin_facilities': "=\"" + foundFacility.StationNumber + "\""})
            }
        }

        function getAdoptionFacilities(stationNumbers, facilityIds) {
            adoptions.forEach(function(a) {
                stationNumbers.forEach(function(sn) {
                    if (a.facility_id === sn) {
                        return facilityIds.push({'adoption_facilities': "=\"" + sn + "\""})
                    }
                })
            })
        }

        if (adoptingFacility) {
            var filteredFacilities;
            var stationNumbers = [];
            var adoptionFacilityIds = [];
            if (adoptingFacility.includes('VISN')) {
                filteredFacilities = facilities.filter(function(f) {
                    return 'VISN-' + f.VISN == adoptingFacility
                });

                filteredFacilities.forEach(function(ff) {
                    stationNumbers.push(ff.StationNumber)
                })

                getAdoptionFacilities(stationNumbers, adoptionFacilityIds)

            } else {
                var matchingFacility;
                matchingFacility = facilities.find(function(f) {
                    return f.StationNumber === adoptingFacility
                });

                stationNumbers.push(matchingFacility.StationNumber)

                getAdoptionFacilities(stationNumbers, adoptionFacilityIds)
            }
        }

        console.log('filtered facilities', adoptingFacility)
        console.log('originatingFacility', originatingFacility)
        function searchWithQueryAndAllFilters() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: originFacility
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityIds}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndCategoriesAndOriginFacility() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: originFacility
                    }
                ]
            })
        }

        function searchWithQueryAndCategoriesAndAdoptingFacility() {
            console.log('cat filters', categoryFilters)
            console.log('adopt filters', adoptionFacilityIds)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityIds}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndBothFacilities() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: originFacility
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityIds}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndCategories() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    }
                ]
            })
        }

        function searchWithQueryAndOriginFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: originFacility
                    }
                ]
            })
        }

        function searchWithQueryAndAdoptingFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityIds}
                        ]
                    }
                ]
            })
        }

        function searchWithAllFilters() {
            results = fuse.search({$or: categoryFilters.concat(originFacility, adoptionFacilityIds)})
        }

        function searchWithCategoriesAndOriginFacility() {
            results = fuse.search({$or: categoryFilters.concat(originFacility)})
        }

        function searchWithCategoriesAndAdoptingFacility() {
            results = fuse.search({$or: categoryFilters.concat(adoptionFacilityIds)})
        }

        function searchWithBothFacilities() {
            results = fuse.search({$or: adoptionFacilityIds.concat(originFacility)})
        }

        function searchWIthOnlyCategories() {
            results = fuse.search({$or: categoryFilters})
        }

        function searchWithOnlyOriginFacility() {
            console.log('just origin facility', originatingFacility)
            results = fuse.search({$or: originFacility})
        }

        function searchWithOnlyAdoptingFacility() {
            results = fuse.search({$or: adoptionFacilityIds})
        }

        // Run the search query
//        results = fuse.search(query)
        console.log('originalFilters', originatingFacility)
        if (query !== '' && categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Query and all filters')
            searchWithQueryAndAllFilters()
        } else if (query !== '' && categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Query,cats, and origin')
            searchWithQueryAndCategoriesAndOriginFacility();
        } else if (query !== '' && categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Query,cats, and adopting')
            searchWithQueryAndCategoriesAndAdoptingFacility();
        } else if (query !== '' && !categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Query and both facilities')
            searchWithQueryAndBothFacilities();
        } else if (query !== '' && categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Query and cats')
            searchWithQueryAndCategories()
        } else if (query !== '' && !categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Query and origin')
            searchWithQueryAndOriginFacility()
        } else if (query !== '' && !categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Query and adopting')
            searchWithQueryAndAdoptingFacility()
        } else if (query !== '' && !categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Just query')
            results = fuse.search(query)
        } else if (query === '' && categoryFilters && originatingFacility && adoptingFacility) {
            console.log('All filters')
            searchWithAllFilters();
        } else if (query === '' && categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('cats and origin')
            searchWithCategoriesAndOriginFacility();
        } else if (query === '' && categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('cats and adopting')
            searchWithCategoriesAndAdoptingFacility();
        } else if (query === '' && !categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Both facilities')
            searchWithBothFacilities();
        } else if (query === '' && categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Just cats')
            searchWIthOnlyCategories()
        } else if (query === '' && !categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Just Origin')
            console.log('originFacility', originFacility)
            searchWithOnlyOriginFacility();
        } else if (query === '' && !categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Just Adopting')
            searchWithOnlyAdoptingFacility();
        } else if (query === '' && !categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('No query or filters')
            results = [];
        }

        console.log('results', results)

        console.log(results.length);

        // Show the results summary section
        document.getElementById('dm-search-practices').classList.remove('display-none')

        // Print the number of results for the query
        resultsSummary.innerHTML = results.length + ' result' + (results.length === 1 ? '' : 's');

        // Highlight results (only Fuse.js matching)
        results.forEach(function (result) {
            highlighter(result);
        });

        // Template out the search results
        results.forEach(function (result) {
            var practiceImage = result.item.image
            var practiceName = result.item.name
            var noBackgroundImage = practiceImage ? '' : 'class: fas fa-images fa-3x text-base-lighter search-no-image';
            var background = practiceImage ? 'background: url(' + practiceImage + ')' + ' transparent; background-repeat: no-repeat; background-position: center; background-size: cover;' : 'background-color: #f0f0f0; transparent; background-size: contain; background-repeat: no-repeat; background-position: center; ';
            var favoriteButtonIcon = result.item.user_favorited ? 'fas' : 'far';
            var practiceLinkClass = practiceImage ? '' : ' dm-alt-practice-link'
            var favoriteButton =
                '<a aria-label="Bookmark ' + practiceName + '" tabindex="-1" aria-hidden="true" class="dm-practice-bookmark-btn" id="dm-bookmark-button-' + result.item.id + '" data-remote="true" rel="nofollow" data-method="post" href="/practices/' + result.item.slug + '/favorite.js">' +
                '<i class="' + favoriteButtonIcon + ' fa-bookmark dm-favorite-icon-' + result.item.id + ' text-no-underline"></i>' +
                '</a>';
            var cardImageHtml =
                '<div class="dm-practice-card-img-container">' +
                '<img alt="' + practiceName + ' Marketplace Card Image" class="grid-row marketplace-card-img radius-top-sm" src="' + practiceImage + '">' +
                '</div>'
            var noCardImageHtml =
                '<div class="dm-bg-gray-80">' +
                '<h3 class="text-normal font-sans-lg dm-practice-title multiline-ellipses-2 margin-x-2 margin-y-4">' +
                practiceName +
                '</h3>' +
                '</div>'
            var cardImage = practiceImage ? cardImageHtml : noCardImageHtml
            var practiceNameHeader =
                '<h3 class="text-normal font-sans-lg dm-practice-title multiline-ellipses-2 margin-top-0 margin-bottom-2">' +
                practiceName +
                '</h3>'
            var assignPracticeHeader = practiceImage ? practiceNameHeader : ''
            resultsHTML +=
                '<div class="dm-practice-card padding-y-105">' +
                <% if current_user.present? %>
                favoriteButton +
                <% end %>
                '<a href="/practices/' + result.item.slug + '" aria-label="Go to ' + result.item.name + '" aria-hidden="true" class="dm-practice-link' + practiceLinkClass + '">' +
                '<div class=" dm-practice-card-container">' +
                cardImage +
                '<div class="padding-105 height-card-mobile">' +
                assignPracticeHeader +
                '<div>' +
                '<p class="multiline-ellipses-1 font-sans-sm practice-card-tagline">' + result.item.tagline + '</p>' +
                '</div>' +
                '<div class="dm-practice-card-origin margin-bottom-2">' +
                '<span class="line-clamp-2 font-sans-3xs text-gray-50 multiline-ellipses-3 line-height-sans-205 dm-practice-card-origin-info">' +
                'Created in ' + result.item.date_initiated + ' ' + result.item.initiating_facility_name +
                '</span>' +
                '</div>' +
                '</div>' +
                '</div>' +
                '</a>' +
                '</div>';

                '<!-- Uncomment to show Fuse.js diagnostics -->' +
                '<!--' +
                '<h3>Fuse.js highlighted character matching</h3>' +
                '<p class="">' + result.highlight + '</p>' +
                '<p><b>Score: ' + result.score + '</b></p>' +
                '-->'
        });

        // Print results to the page
        searchResults.innerHTML = resultsHTML;

        // Highlight search results where exact keyword matches
        var mark = new Mark('#search-results');
        mark.mark(query);
    }


    // Highlight Fuse.js results
    // Adapted from: https://github.com/brunocechet/Fuse.js-with-highlight
    function highlighter(resultItem) {
        resultItem.matches.forEach(function (matchItem) {
            // don't highlight if match was on category or adoption facilities since they are not in practice search result text and can't be highlighted
            // don't highlight origin_facilities or initiating_facility because they are ids. The initiating_facility_name key will cover any text
            if (matchItem.key != 'category_names' && matchItem.key != 'adoption_facilities' && matchItem.key != 'origin_facilities' && matchItem.key != 'initiating_facility') {
                var text = resultItem.item[matchItem.key];
                var result = [];
                var matches = [].concat(matchItem.indices); // limpar referencia
                var pair = matches.shift();

                for (var i = 0; i < text.length; i++) {
                    var char = text.charAt(i);
                    if (pair && i === pair[0]) {
                        result.push('<mark>')
                    }
                    result.push(char);
                    if (pair && i === pair[1]) {
                        result.push('</mark>');
                        pair = matches.shift()
                    }
                }
                resultItem.highlight = result.join('');

                console.log('result item', resultItem)

                if (resultItem.children && resultItem.children.length > 0) {
                    resultItem.children.forEach(function (child) {
                        highlighter(child);
                    });
                }
            }
        });
    }


    // Set up search

    // Set Fuse.js search options
    var search_options = {
        keys: ['name', 'tagline', 'description', 'summary', 'initiating_facility', 'category_names', 'maturity_level', 'adoption_facilities', 'origin_facilities', 'initiating_facility_name'],
        minMatchCharLength: 1,
        tokenize: true,
        shouldSort: true,
        threshold: 0.2,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        matchAllTokens: true,
        findAllMatches: true,
        includeMatches: true,
        includeScore: true,
        useExtendedSearch: true,
        ignoreLocation: true
    };


    // Create a search context with practices and search options
    var fuse = new Fuse(practices, search_options);
    console.log('fuse', fuse)

    // Set up "enter" event handler for search field
    var timeout = null;

//    $(document).on('submit', '#dm-practice-search-form', function (e) {
//        e.preventDefault();

//        // Make a new timeout set to go off in 500ms
//        timeout = setTimeout(function () {
//            search(searchField.value);
//            window.history.pushState("", "", '/search?query=' + searchField.value);
//            trackSearchField(decodeURI(searchField.value));
//        }, 500);

//    });

    function getComboBoxVal(inputEle, liEle) {
        var facility;
        if (inputEle.val() !== '' && liEle.length == 1) {
            console.log('first')
            if (liEle.attr('data-value').includes('VISN')) {
                return inputEle.val()
            } else {
                  facility = facilities.find(function(f) {
                    return f.StationNumber === liEle.attr('data-value')
                })
                return facility.StationNumber
            }
        } else if (inputEle.val() !== '' && liEle.length == 0) {
            console.log('second')
            if (inputEle.val().includes('VISN')) {
                return inputEle.val()
            } else {
                facility = facilities.find(function(f) {
                    return inputEle.val().toLowerCase().includes(f.OfficialStationName.toLowerCase())
                })
                return facility.StationNumber;
            }
        } else {
            console.log('third')
            return null;
        }
    }

    $(document).on('submit', '#update-search-results-form', function (e) {
        e.preventDefault();
        var chosenCategories = $('#update-search-results-form [type="checkbox"]:checked').map(function () {
            return this.value;
        }).get();
        if (chosenCategories.length == 0) {
            chosenCategories = null;
        }

        var originatingFacilityInput = $('#originating-facility-and-visn-select');
        var originatingFacilityLi = $('#originating-facility-and-visn-select--list > li[aria-selected=true]');
        var originatingFacility =  getComboBoxVal(originatingFacilityInput, originatingFacilityLi)
//        if (originatingFacilityInput.val() !== '' && originatingFacilityLi.length == 1) {
//            console.log('first')
//            if (originatingFacilityLi.attr('data-value').includes('VISN')) {
//                originatingFacility = originatingFacilityInput.val()
//            } else {
//                facilities.find(function(f) {
//                    if (f.StationNumber === originatingFacilityLi.attr('data-value')) {
//                        originatingFacility = f.StationNumber
//                    }
//                })
//            }
//        } else if (originatingFacilityInput.val() !== '' && originatingFacilityLi.length == 0) {
//            console.log('second')
//            if (originatingFacilityInput.val().includes('VISN')) {
//                originatingFacility = originatingFacilityInput.val()
//            } else {
//                facilities.find(function(f) {
//                    if (originatingFacilityInput.val().includes(f.OfficialStationName)) {
//                        originatingFacility = f.StationNumber
//                    }
//                })
//            }
//        } else {
//            console.log('third')
//            originatingFacility = null;
//        }

        var adoptingFacilityInput = $('#adopting-facility-and-visn-select');
        var adoptingFacilityLi = $('#adopting-facility-and-visn-select--list > li[aria-selected=true]');
        var adoptingFacility = getComboBoxVal(adoptingFacilityInput, adoptingFacilityLi)

//        if (adoptingFacilityInput.val() !== '' && adoptingFacilityLi.length == 1) {
//            console.log('first')
//            if (adoptingFacilityLi.attr('data-value').includes('VISN')) {
//                adoptingFacility = adoptingFacilityInput.val()
//            } else {
//                facilities.find(function(f) {
//                    if (f.StationNumber === adoptingFacilityLi.attr('data-value')) {
//                        adoptingFacility = f.StationNumber
//                    }
//                })
//            }
//        } else if (adoptingFacilityInput.val() !== '' && adoptingFacilityLi.length == 0) {
//            console.log('second')
//            if (adoptingFacilityInput.val().includes('VISN')) {
//                adoptingFacility = adoptingFacilityInput.val()
//            } else {
//                facilities.find(function(f) {
//                    if (adoptingFacilityInput.val().includes(f.OfficialStationName)) {
//                        adoptingFacility = f.StationNumber
//                    }
//                })
//            }
//        } else {
//            console.log('third')
//            adoptingFacility = null;
//        }

        console.log('cate', chosenCategories)
        console.log('orig', originatingFacility)
        console.log('adop', adoptingFacility)

        search(searchField.value, chosenCategories, originatingFacility, adoptingFacility)
    });

    if (window.location.pathname === '/search' && window.location.search !== '') {
        const query = window.location.search.split('=')[1];
        search(decodeURI(query));
        trackSearchField(decodeURI(query));
        searchField.value = decodeURI(query);
    }
}

function trackSearchField(searchTerm) {
    if (searchTerm !== '') {
        ahoy.track('Practice search', {search_term: searchTerm});
        if (typeof ga === 'function') {
            ga('send', {
                hitType: 'event',
                eventCategory: 'search',
                eventAction: 'search',
                location: '/search?query=' + searchTerm
            });
        }
    }
}

document.addEventListener('turbolinks:load', function () {
    searchPracticesPage();
});
