### Uncomment the "f.inputs" block to render on PageComponent page to get html
### This will help build the Arbre::Context to concat with the main template
# f.inputs 'Paragraph',
#          for: [:component, f.object.component || PageParagraphComponent.new],
#          id: 'PageHeaderComponent_poly', class: 'inputs polyform' do |phc|
#   phc.input :text, hint: 'Make this header stand out'
#
# end

# TODO: get the placeholder how active admin does "NEW_#{association_human_name.upcase.split(' ').join('_')}_RECORD"
placeholder ||= 'NEW_PAGE_COMPONENT_RECORD'
component ||= nil
html = Arbre::Context.new do
  li "", id: "PagePublicationComponent_poly_#{placeholder}", class: "input polyform component-#{placeholder}" do
    fieldset class: "inputs" do
      legend do
        span 'Publication'
      end
      if component
        input type: 'hidden', value: component.id, name: "page[page_components_attributes][#{placeholder}][component_attributes][id]"
      end
      ol do

        # Title
        li class: 'string input required stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_title_input" do
          label 'Title', for: "page_page_components_attributes_publication_#{placeholder}_component_attributes_text", class: 'label'
          input value: component&.title || nil,
                type: 'text',
                required: 'required',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_title",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][title]"
          para 'Publication title styled as an /"H3"', class: 'inline-hints'
        end

        # URL
        li class: 'string input optional stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_url_input" do
          label 'URL', for: "page_page_components_attributes_publication_#{placeholder}_component_attributes_url", class: 'label'
          input value: component&.url || nil,
                type: 'text',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_url",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][url]"
          para 'Link to publication if hosted elsewhere, e.g. https://va.gov', class: 'inline-hints'
        end

        # Attachment
        li class: 'file input optional', id: "page_page_components_attributes_#{placeholder}_component_attributes_attachment_input" do
          label 'File', for: "page_page_components_attributes_#{placeholder}_component_attributes_attachment", class: 'label'
          input value: component&.attachment || nil, type: 'file', accept: '.pdf,.doc,.docx',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_attachment",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][attachment]"
          para 'File types allowed: .pdf, .doc, .docx.', class: 'inline-hints'
            if component&.attachment != nil
              para class: 'aa-downloadable-file-link' do
                span 'Current uploaded file:'
                a component&.attachment_file_name, href: "#{component&.attachment}", target: "_blank"
              end
            end
          para 'Upload a publication file. Supports .pdf,.doc, or .docx', class: 'inline-hints'
        end

        # Publication date
        li class: 'date input optional', id: "page_page_components_attributes_#{placeholder}_component_attributes_published_date_input" do
          label 'Publication date', for: "page_page_components_attributes_publication_#{placeholder}_component_attributes_published_date", class: 'label'
          input value: component&.published_date || nil, 
                type: 'date',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_published_date",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][published_date]"
          para 'Original publication date', class: 'inline-hints'
        end

        # Published in
        li class: 'string input optional stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_published_in_input" do
          label 'Published in', for: "page_page_components_attributes_publication_#{placeholder}_component_attributes_published_in", class: 'label'
          input value: component&.published_in || nil,
                type: 'text',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_published_in",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][published_in]"
          para 'Name of publication, italicized', class: 'inline-hints'
        end

        # Authors
        li class: 'string input optional stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_authors_input" do
          label 'Authors', for: "page_page_components_attributes_publication_#{placeholder}_component_attributes_authors", class: 'label'
          input value: component&.authors || nil,
                type: 'text',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_authors",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][authors]"
          para 'Enter with appropriate punctuation. e.g. "John, Joan, and Jill', class: 'inline-hints'
        end
      end
    end
  end
end

return html.to_s
