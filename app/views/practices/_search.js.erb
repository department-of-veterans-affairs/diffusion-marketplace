var practices = <%= @practices_json %>;
var facilities = <%= raw @facilities_data.to_json %>;
var visns = <%= raw @visn_data.to_json %>;
var adoptions = <%= raw @diffusion_histories.to_json %>;
var results = null;
var resultsHTML = '';

// sort functions
function sortAToZ(a, b) {
    return a.item.name.localeCompare(b.item.name, undefined, { numeric: true, sensitivity: 'base' })
}

function sortByDateAdded(a, b) {
    return b.item.created_at.localeCompare(a.item.created_at, undefined, { numeric: true, sensitivity: 'base' })
}

function sortByAdoptionCounts(a, b) {
    if (a.item.adoption_count > b.item.adoption_count){
        return -1;
    }
    if (a.item.adoption_count < b.item.adoption_count){
        return 1;
    }
    return 0;
}

function sortByScore(a, b) {
    if (a.score < b.score){
        return -1;
    }
    if (a.score > b.score){
        return 1;
    }
    return 0;
}

// Build out practice cards once results come back from Fuse
function buildPracticeCard(result) {
    var cardHtml = '';
    var practiceImage = result.item.image
    var practiceName = result.item.name
    var favoriteButtonIcon = result.item.user_favorited ? 'fas' : 'far';
    var practiceLinkClass = practiceImage ? '' : ' dm-alt-practice-link'
    var favoriteButton =
        '<a aria-label="Bookmark ' + practiceName + '" tabindex="-1" aria-hidden="true" class="dm-practice-bookmark-btn" id="dm-bookmark-button-' + result.item.id + '" data-remote="true" rel="nofollow" data-method="post" href="/practices/' + result.item.slug + '/favorite.js">' +
        '<i class="' + favoriteButtonIcon + ' fa-bookmark dm-favorite-icon-' + result.item.id + ' text-no-underline"></i>' +
        '</a>';
    var cardImageHtml =
        '<div class="dm-practice-card-img-container">' +
        '<img alt="' + practiceName + ' Marketplace Card Image" class="grid-row marketplace-card-img radius-top-sm" src="' + practiceImage + '">' +
        '</div>'
    var noCardImageHtml =
        '<div class="dm-bg-gray-80">' +
        '<h3 class="text-normal font-sans-lg dm-practice-title multiline-ellipses-2 margin-x-2 margin-y-4">' +
        practiceName +
        '</h3>' +
        '</div>'
    var cardImage = practiceImage ? cardImageHtml : noCardImageHtml
    var practiceNameHeader =
        '<h3 class="text-normal font-sans-lg dm-practice-title multiline-ellipses-2 margin-top-0 margin-bottom-2">' +
        practiceName +
        '</h3>'
    var assignPracticeHeader = practiceImage ? practiceNameHeader : ''
    cardHtml +=
        '<div class="dm-practice-card padding-y-105">' +
        <% if current_user.present? %>
        favoriteButton +
        <% end %>
        '<a href="/practices/' + result.item.slug + '" aria-label="Go to ' + result.item.name + '" aria-hidden="true" class="dm-practice-link' + practiceLinkClass + '">' +
        '<div class=" dm-practice-card-container">' +
        cardImage +
        '<div class="padding-105 height-card-mobile">' +
        assignPracticeHeader +
        '<div>' +
        '<p class="multiline-ellipses-1 font-sans-sm practice-card-tagline">' + result.item.tagline + '</p>' +
        '</div>' +
        '<div class="dm-practice-card-origin margin-bottom-2">' +
        '<span class="line-clamp-2 font-sans-3xs text-gray-50 multiline-ellipses-3 line-height-sans-205 dm-practice-card-origin-info">' +
        'Created in ' + result.item.date_initiated + ' ' + result.item.initiating_facility_name +
        '</span>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '</a>' +
        '</div>';

    return cardHtml;
}

function searchPracticesPage() {
    const searchField = document.querySelector('#dm-practice-search-field');

    // Skip if not the search page
    if (location.pathname !== '/search') return;

    // Template out the search results
    function buildSearchResults(results, sortOption) {
        var resultsArray = [];
        var finalResults = '';
        results.sort(sortOption).forEach(function (result) {
            finalResults += buildPracticeCard(result)
            resultsArray.push(buildPracticeCard(result))

            '<!-- Uncomment to show Fuse.js diagnostics -->' +
            '<!--' +
            '<h3>Fuse.js highlighted character matching</h3>' +
            '<p class="">' + result.highlight + '</p>' +
            '<p><b>Score: ' + result.score + '</b></p>' +
            '-->'
    });


//        console.log('final', finalResults);
//        console.log('final array', resultsArray);

        if (results.length > 0) {
            // Show the results summary section
            $('#dm-search-practices').hasClass('display-none') ? $('#dm-search-practices').removeClass('display-none') : ''

            $('#no-search-query-content').addClass('display-none')

            // Print results to the page
            document.querySelector('#search-results').innerHTML = finalResults;

            $('#search-results').showMoreItems({
                startNum: 12,
                afterNum: 12,
                moreText: 'Load more',
                noMoreText: 'No more results'
            })

            $(document).on('click', '.addListData', function(e) {
                truncateText()
                if ($('.addListData').text() !== 'Load more') {
                    $('.addListData').parent().addClass('display-none')
                }
            })

        } else {
            console.log('no results')
            !$('#dm-search-practices').hasClass('display-none') ? $('#dm-search-practices').addClass('display-none') : ''
            // Show the no results text
            $('#no-search-query-content').hasClass('display-none') ? $('#no-search-query-content').removeClass('display-none') : ''
            $('#no-query-p').addClass('display-none')
            $('#no-query-results-p').removeClass('display-none')
        }

    }


    // Search practices and populate the page
    function search(query, categories, originatingFacility, adoptingFacility) {
        console.log('query', query)
        console.log('origin facility', originatingFacility)
        console.log('adopting facility', adoptingFacility)

        // Trim whitespace from the query (can cause matching problems)
        query = query.trim();

        // Set variables
        var resultsSummary = document.querySelector('#results-summary');

        // set the search page search bar input value
        searchField.value = query;

        if (query !== '') {
            var searchBarQueryArray = []
            search_options.keys.forEach(function(practiceKey) {
                var queryObj = {}
                queryObj[practiceKey] = query
                return searchBarQueryArray.push(queryObj)
            })
        }

        if (categories) {
            var categoryFilters = []
            categories.forEach(function (categorySelection) {
                return categoryFilters.push({'category_names': "'" + categorySelection})
            })
        }

        var originFacilityArray = originatingFacility ? [] : null

        if (originatingFacility && originatingFacility.includes('VISN')) {
            console.log('in here')
            var foundVisn = visns.find(function(v) {
                return v.number === originatingFacility
            })

            originFacilityArray.push({'initiating_facility': "=\"" + foundVisn.id.toString() + "\""})

            var visnFacilities = facilities.filter(function(f) {
                return f.VISN === foundVisn.number.split('-').pop()
            })

            visnFacilities.forEach(function(vf) {
                originFacilityArray.push({'initiating_facility': "=\"" + vf.StationNumber + "\""})
            })

            console.log('found visn', foundVisn)
            console.log('visnFacilities', visnFacilities)
            console.log('Origin facilities with VISN', originFacilityArray)

        } else if (originatingFacility && !originatingFacility.includes('VISN')){
            var foundFacility = facilities.find(function(f) {
                return originatingFacility === f.StationNumber
            })
            originFacilityArray.push({'origin_facilities': "=\"" + foundFacility.StationNumber + "\""})
        }

        function getAdoptionFacilities(stationNumbers, facilityIds) {
            adoptions.forEach(function(a) {
                stationNumbers.forEach(function(sn) {
                    if (a.facility_id === sn) {
                        return facilityIds.push({'adoption_facilities': "=\"" + sn + "\""})
                    }
                })
            })
        }

        if (adoptingFacility) {
            var filteredFacilities;
            var stationNumbers = [];
            var adoptionFacilityArray = [];
            if (adoptingFacility.includes('VISN')) {
                filteredFacilities = facilities.filter(function(f) {
                    return 'VISN-' + f.VISN == adoptingFacility
                });

                filteredFacilities.forEach(function(ff) {
                    stationNumbers.push(ff.StationNumber)
                })

                getAdoptionFacilities(stationNumbers, adoptionFacilityArray)

            } else {
                var matchingFacility;
                matchingFacility = facilities.find(function(f) {
                    return f.StationNumber === adoptingFacility
                });

                stationNumbers.push(matchingFacility.StationNumber)

                getAdoptionFacilities(stationNumbers, adoptionFacilityArray)
            }
        }

        console.log('filtered facilities', adoptingFacility)
        console.log('originatingFacility', originatingFacility)
        function searchWithQueryAndAllFilters() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: originFacilityArray
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndCategoriesAndOriginFacility() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: originFacilityArray
                    }
                ]
            })
        }

        function searchWithQueryAndCategoriesAndAdoptingFacility() {
            console.log('cat filters', categoryFilters)
            console.log('adopt filters', adoptionFacilityArray)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndBothFacilities() {
            console.log(categoryFilters)
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: originFacilityArray
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            })
        }

        function searchWithQueryAndCategories() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: categoryFilters
                    }
                ]
            })
        }

        function searchWithQueryAndOriginFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: originFacilityArray
                    }
                ]
            })
        }

        function searchWithQueryAndAdoptingFacility() {
            results = fuse.search({
                $and: [
                    {
                        $or: searchBarQueryArray
                    },
                    {
                        $and: [
                            {$or: adoptionFacilityArray}
                        ]
                    }
                ]
            })
        }

        function searchWithAllFilters() {
            results = fuse.search({$or: categoryFilters.concat(originFacilityArray, adoptionFacilityArray)})
        }

        function searchWithCategoriesAndOriginFacility() {
            results = fuse.search({$or: categoryFilters.concat(originFacilityArray)})
        }

        function searchWithCategoriesAndAdoptingFacility() {
            results = fuse.search({$or: categoryFilters.concat(adoptionFacilityArray)})
        }

        function searchWithBothFacilities() {
            results = fuse.search({$or: adoptionFacilityArray.concat(originFacilityArray)})
        }

        function searchWIthOnlyCategories() {
            results = fuse.search({$or: categoryFilters})
        }

        function searchWithOnlyOriginFacility() {
            console.log('just origin facility', originatingFacility)
            results = fuse.search({$or: originFacilityArray})
        }

        function searchWithOnlyAdoptingFacility() {
            results = fuse.search({$or: adoptionFacilityArray})
        }

        // Run the search query and include filters(if any)
        console.log('originalFilters', originatingFacility)
        if (query !== '' && categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Query and all filters')
            searchWithQueryAndAllFilters()
        } else if (query !== '' && categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Query,cats, and origin')
            searchWithQueryAndCategoriesAndOriginFacility();
        } else if (query !== '' && categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Query,cats, and adopting')
            searchWithQueryAndCategoriesAndAdoptingFacility();
        } else if (query !== '' && !categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Query and both facilities')
            searchWithQueryAndBothFacilities();
        } else if (query !== '' && categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Query and cats')
            searchWithQueryAndCategories()
        } else if (query !== '' && !categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Query and origin')
            searchWithQueryAndOriginFacility()
        } else if (query !== '' && !categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Query and adopting')
            searchWithQueryAndAdoptingFacility()
        } else if (query !== '' && !categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Just query')
            results = fuse.search(query)
        } else if (query === '' && categoryFilters && originatingFacility && adoptingFacility) {
            console.log('All filters')
            searchWithAllFilters();
        } else if (query === '' && categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('cats and origin')
            searchWithCategoriesAndOriginFacility();
        } else if (query === '' && categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('cats and adopting')
            searchWithCategoriesAndAdoptingFacility();
        } else if (query === '' && !categoryFilters && originatingFacility && adoptingFacility) {
            console.log('Both facilities')
            searchWithBothFacilities();
        } else if (query === '' && categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('Just cats')
            searchWIthOnlyCategories()
        } else if (query === '' && !categoryFilters && originatingFacility && !adoptingFacility) {
            console.log('Just Origin')
            console.log('originFacilityArray', originFacilityArray)
            searchWithOnlyOriginFacility();
        } else if (query === '' && !categoryFilters && !originatingFacility && adoptingFacility) {
            console.log('Just Adopting')
            searchWithOnlyAdoptingFacility();
        } else if (query === '' && !categoryFilters && !originatingFacility && !adoptingFacility) {
            console.log('No query or filters')
            results = [];
        }

        console.log('results', results)
        console.log(results.length);

        // Get the results
        buildSearchResults(results, sortByScore)

        // Print the number of results for the query
        resultsSummary.innerHTML = results.length + ' result' + (results.length === 1 ? ':' : 's:');

        // Highlight results (only Fuse.js matching)
        results.forEach(function (result) {
            highlighter(result);
        });

        // Highlight search results where exact keyword matches
        var mark = new Mark('#search-results');
        mark.mark(query);
    }


    // Highlight Fuse.js results
    // Adapted from: https://github.com/brunocechet/Fuse.js-with-highlight
    function highlighter(resultItem) {
        resultItem.matches.forEach(function (matchItem) {
            // don't highlight if match was on category or adoption facilities since they are not in practice search result text and can't be highlighted
            // don't highlight origin_facilities or initiating_facility because they are ids. The initiating_facility_name key will cover any text
            if (matchItem.key != 'category_names' && matchItem.key != 'adoption_facilities' && matchItem.key != 'origin_facilities' && matchItem.key != 'initiating_facility') {
                var text = resultItem.item[matchItem.key];
                var result = [];
                var matches = [].concat(matchItem.indices); // limpar referencia
                var pair = matches.shift();

                for (var i = 0; i < text.length; i++) {
                    var char = text.charAt(i);
                    if (pair && i === pair[0]) {
                        result.push('<mark>')
                    }
                    result.push(char);
                    if (pair && i === pair[1]) {
                        result.push('</mark>');
                        pair = matches.shift()
                    }
                }
                resultItem.highlight = result.join('');

                if (resultItem.children && resultItem.children.length > 0) {
                    resultItem.children.forEach(function (child) {
                        highlighter(child);
                    });
                }
            }
        });
    }

    // Set Fuse.js search options
    var search_options = {
        keys: ['name', 'tagline', 'description', 'summary', 'initiating_facility', 'category_names', 'maturity_level', 'adoption_facilities', 'origin_facilities', 'initiating_facility_name'],
        minMatchCharLength: 1,
        tokenize: true,
        shouldSort: true,
        threshold: 0.2,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        matchAllTokens: true,
        findAllMatches: true,
        includeMatches: true,
        includeScore: true,
        useExtendedSearch: true,
        ignoreLocation: true
    };


    // Create a search context with practices and search options
    var fuse = new Fuse(practices, search_options);
    console.log('fuse', fuse)

    // Set up "enter" event handler for search field
    var timeout = null;

//    $(document).on('submit', '#dm-practice-search-form', function (e) {
//        e.preventDefault();

//        // Make a new timeout set to go off in 500ms
//        timeout = setTimeout(function () {
//            search(searchField.value);
//            window.history.pushState("", "", '/search?query=' + searchField.value);
//            trackSearchField(decodeURI(searchField.value));
//        }, 500);

//    });

    function getComboBoxVal(inputEle, liEle) {
        var facility;
        if (inputEle.val() !== '' && liEle.length == 1) {
            console.log('first')
            if (liEle.attr('data-value').includes('VISN')) {
                return inputEle.val()
            } else {
                  facility = facilities.find(function(f) {
                    return f.StationNumber === liEle.attr('data-value')
                })
                return facility.StationNumber
            }
        } else if (inputEle.val() !== '' && liEle.length == 0) {
            console.log('second')
            if (inputEle.val().includes('VISN')) {
                return inputEle.val()
            } else {
                facility = facilities.find(function(f) {
                    return inputEle.val().toLowerCase().includes(f.OfficialStationName.toLowerCase())
                })
                return facility.StationNumber;
            }
        } else {
            console.log('third')
            return null;
        }
    }

    $(document).on('submit', '#update-search-results-form', function (e) {
        e.preventDefault();

        // Close search filter accordion if it's open
        var accordionButton = $('.search-filters-accordion-button')
        if (accordionButton.attr('aria-expanded') == 'true') {
            accordionButton.attr('aria-expanded', 'false')
            $('#search_filters_dropdown').attr('hidden', 'true')
        }

        // Make a new timeout set to go off in 250ms
        var urlQuery = searchField.value === '' ? '/search' : '/search?query=' + searchField.value;
        console.log('search field is not empty')
        timeout = setTimeout(function () {
              window.history.pushState({ turbolinks: {} }, "", urlQuery);
              trackSearchField(decodeURI(urlQuery));
        }, 250);

        console.log('search', window.location.search)
        console.log('history', URL.searchParams)

        console.log('chosen cats', chosenCategories)
        // Get the value of the originating facility combo box
        var originatingFacilityInput = $('#originating-facility-and-visn-select');
        var originatingFacilityLi = $('#originating-facility-and-visn-select--list > li[aria-selected=true]');

        var originatingFacility =  getComboBoxVal(originatingFacilityInput, originatingFacilityLi)

        // Get the value of the adopting facility combo box
        var adoptingFacilityInput = $('#adopting-facility-and-visn-select');
        var adoptingFacilityLi = $('#adopting-facility-and-visn-select--list > li[aria-selected=true]');

        var adoptingFacility = getComboBoxVal(adoptingFacilityInput, adoptingFacilityLi)

        // Get the values for any chosen categories
        var selectedCheckboxes = $('#update-search-results-form [type="checkbox"]:checked')
        var chosenCategories = $('#update-search-results-form [type="checkbox"]:checked').map(function () {
            return this.value;
        }).get();
        if (chosenCategories.length == 0) {
            chosenCategories = null;
        }

        console.log('cate', chosenCategories)
        console.log('orig', originatingFacility)
        console.log('adop', adoptingFacility)
        console.log('search field val', searchField.value)

        // Run the search
        search(searchField.value, chosenCategories, originatingFacility, adoptingFacility)

        // Display the amount of filters used(if any)
        var checkboxCount = selectedCheckboxes.length
        var noOriginatingFacilityText = originatingFacilityInput.val() === ''
        var originatingFacilityTextPresent = originatingFacilityInput.val() !== ''
        var noAdoptingFacilityText = adoptingFacilityInput.val() === ''
        var adoptingFacilityTextPresent = adoptingFacilityInput.val() !== ''

        function accordionText(checkboxCount, inputCount) {
            return accordionButton.text('Filters ' + '(' + (checkboxCount + inputCount) + ')')
        }

        if (checkboxCount > 0 && originatingFacilityTextPresent && noAdoptingFacilityText) {
            accordionText(checkboxCount, 1)
        } else if (checkboxCount > 0 && noOriginatingFacilityText && adoptingFacilityTextPresent) {
            accordionText(checkboxCount, 1)
        } else if (checkboxCount > 0 && noOriginatingFacilityText && noAdoptingFacilityText) {
            accordionText(checkboxCount, 0)
        } else if (checkboxCount > 0 && originatingFacilityTextPresent && adoptingFacilityTextPresent) {
            accordionText(checkboxCount, 2)
        } else if (checkboxCount === 0 && originatingFacilityTextPresent && noAdoptingFacilityText) {
            accordionText(0, 1)
        } else if (checkboxCount === 0 && noOriginatingFacilityText && adoptingFacilityTextPresent) {
            accordionText(0, 1)
        } else if (checkboxCount === 0 && noOriginatingFacilityText && noAdoptingFacilityText) {
            return accordionButton.text('Filters')
        } else if (checkboxCount === 0 && originatingFacilityTextPresent && adoptingFacilityTextPresent) {
            accordionText(0, 2)
        }
    });

    // Sort the results based on each sort option
    var sortSelect = $('#search_sort_option')
    sortSelect.on('change', function() {
        switch ($(this).val()) {
            case "most_relevant":
                buildSearchResults(results, sortByScore);
                break;
            case "a_to_z":
                buildSearchResults(results, sortAToZ);
                break;
            case "adoptions":
                buildSearchResults(results, sortByAdoptionCounts);
                break;
            case "added":
                buildSearchResults(results, sortByDateAdded);
                break;
        }
    })

    // Clear all filter options
    $(document).on('click', '#resetSearchFiltersButton', function(e) {
        e.preventDefault();

        $('.usa-combo-box__clear-input').each(function() {
            $(this).trigger('click');
        })

        $('.usa-checkbox__input').each(function() {
            if ($(this).prop('checked')) {
                $(this).prop('checked', false)
            }
        })
        // Move the focus area back to the top of the filters window
        $(".usa-combo-box__clear-input__wrapper").attr("tabindex",-1).focus();
    })

    if (window.location.pathname === '/search' && window.location.search !== '') {
        const query = window.location.search.split('=')[1];
        search(decodeURI(query));
        trackSearchField(decodeURI(query));
        searchField.value = decodeURI(query);
    }
}

function trackSearchField(searchTerm) {
    if (searchTerm !== '') {
        console.log('ahoy function 1')
        ahoy.track('Practice search', {search_term: searchTerm});
        if (typeof ga === 'function') {
            console.log('ahoy function 2')
            ga('send', {
                hitType: 'event',
                eventCategory: 'search',
                eventAction: 'search',
                location: '/search?query=' + searchTerm
            });
        }
    }
}

function hideSearchIconAndText() {
    // Remove no search items content
    <% if request.url.include?('query') %>
      $('#no-search-query-content').addClass('display-none')
    <% end %>
}

document.addEventListener('turbolinks:load', function () {
    searchPracticesPage();
    hideSearchIconAndText();
});
