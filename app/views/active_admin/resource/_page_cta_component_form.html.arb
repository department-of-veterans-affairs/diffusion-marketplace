# TODO: get the placeholder how active admin does "NEW_#{association_human_name.upcase.split(' ').join('_')}_RECORD"
placeholder ||= 'NEW_PAGE_COMPONENT_RECORD' # = "NEW_#{association_human_name.upcase.split(' ').join('_')}_RECORD"
component ||= nil
html = Arbre::Context.new do
  li "", id: "PageCtaComponent_poly_#{placeholder}", class: "input polyform component-#{placeholder}" do
    fieldset class: "inputs" do
      legend do
        span 'CTA Component'
      end
      ol do
        if component
          input type: 'hidden', value: component.id, name: "page[page_components_attributes][#{placeholder}][component_attributes][id]"
        end
        li class: 'string input required stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_cta_text_input" do
          label 'CTA Text', for: "page_page_components_attributes_#{placeholder}_component_attributes_cta_text", class: 'label'
          input value: component&.cta_text || nil, type: 'text', required: 'required',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_cta_text",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][cta_text]"
        end
        li class: 'string input required stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_button_text_input" do
          label 'Button Text', for: "page_page_components_attributes_#{placeholder}_component_attributes_button_text", class: 'label'
          input value: component&.button_text || nil, type: 'text', required: 'required',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_button_text",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][button_text]"
        end

        li class: 'string input required stringish', id: "page_page_components_attributes_#{placeholder}_component_attributes_url_input" do
          label 'Action Link', for: "page_page_components_attributes_#{placeholder}_component_attributes_url"
          input value: component&.url || nil, type: 'text', required: 'required',
                id: "page_page_components_attributes_#{placeholder}_component_attributes_url",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][url]"
        end

        li class: 'checkbox input optional', id: "page_page_components_attributes_#{placeholder}_component_attributes_has_background_color" do
          if component
            input type: 'hidden', value: '0', name: "page[page_components_attributes][#{placeholder}][component_attributes][has_background_color]"
          end
          label 'Add Background Color', for: "page_page_components_attributes_#{placeholder}_component_attributes_has_border", class: 'label padding-top-0'
          input value: '1', type: 'checkbox', checked: component&.has_background_color?,
                id: "page_page_components_attributes_#{placeholder}_component_attributes_has_background_color",
                name: "page[page_components_attributes][#{placeholder}][component_attributes][has_background_color]",
                class: 'toggle-has-background-color-styling'
        end
      end
    end
  end
end

return html.to_s
